-- SUBQUERY  --> A subquery is a query inside another query. It is used to retrieve data that will be used by the main query.

CREATE TABLE Employee (
    ID INT PRIMARY KEY,
    Name VARCHAR(50),
    Department VARCHAR(50),
    Salary INT
);
INSERT INTO Employee (ID, Name, Department, Salary) VALUES
(1, 'Alice', 'HR', 50000),
(2, 'Bob', 'IT', 60000),
(3, 'Charlie', 'HR', 70000),
(4, 'David', 'IT', 80000),
(5, 'Emma', 'Finance', 90000);

SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE DEPARTMENT =(SELECT DEPARTMENT FROM EMPLOYEE WHERE NAME="BOB");
SELECT * FROM EMPLOYEE WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEE);
SELECT * FROM EMPLOYEE WHERE SALARY < (SELECT SALARY FROM EMPLOYEE WHERE NAME="DAVID");

-- > SINGLE VALUE O/P -->  >, <, >=, <=, =, !
-- > MULTI VALUE O/P  -->  IN, NOT IN, ANY, ALL, EXISTS, NOT EXISTS

SELECT * FROM EMPLOYEE WHERE DEPARTMENT NOT IN (SELECT DEPARTMENT FROM EMPLOYEE WHERE NAME="BOB");
SELECT * FROM EMPLOYEE WHERE SALARY < ANY (SELECT SALARY FROM EMPLOYEE WHERE NAME="DAVID");


-- EXISTS AND NOT EXISTS

CREATE DATABASE SUBQUERIES;
USE SUBQUERIES;
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(50)
);

CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    Product VARCHAR(50),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);
INSERT INTO Customers (CustomerID, Name) VALUES
(1, 'Alice'),
(2, 'Bob'),
(3, 'Charlie'),
(4, 'David');

INSERT INTO Orders (OrderID, CustomerID, Product) VALUES
(101, 1, 'Laptop'),
(102, 2, 'Phone'),
(103, 1, 'Tablet'),
(104, 3, 'Headphones');

SELECT * FROM CUSTOMERS;
SELECT * FROM ORDERS;

-- EXISTS
SELECT * FROM CUSTOMERS WHERE EXISTS (SELECT CUSTOMERID FROM ORDERS WHERE ORDERS.CUSTOMERID=CUSTOMERS.CUSTOMERID);

-- NOT EXISTS
SELECT * FROM CUSTOMERS WHERE NOT EXISTS (SELECT CUSTOMERID FROM ORDERS WHERE ORDERS.CUSTOMERID=CUSTOMERS.CUSTOMERID);

SELECT * FROM EMPLOYEE;
-- SUBQUERIES USING FROM
SELECT MAX(AVG_SAL) 
FROM 
(SELECT DEPARTMENT, AVG(SALARY) AS AVG_SAL FROM EMPLOYEE 
GROUP BY DEPARTMENT) AS AVG_SAL;

-- 2ND HIGHEST EMPLOYEE DETAILS BASED ON SALARY
SELECT * FROM EMPLOYEE WHERE SALARY=(SELECT MAX(SALARY) FROM EMPLOYEE WHERE SALARY < (SELECT MAX(SALARY) FROM EMPLOYEE));